[build-system]
requires = ["uv_build>=0.8.11,<0.9.0"]
build-backend = "uv_build"

[project]
name = "private-assistant-spotify-skill"
version = "1.3.1"
description = "This package allows to use spotify within the private assistant ecosystem."
authors = [
    { name = "stkr22", email = "stkr22@github.com" }
]
readme = "README.md"
license = "GPL-3.0"
license-files = [
    "LICENSE",
]

keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Programming Language :: Python",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Home Automation",
]

requires-python = ">=3.12,<3.13"
dependencies = [
    "spotipy~=2.25.1",
    "private-assistant-commons~=3.6.0",
    "pydantic~=2.9.2",
    "sqlmodel~=0.0.24",
    "jinja2~=3.1.4",
    "asyncpg~=0.29.0",
    "psycopg[binary]~=3.2.9",
    "typer~=0.15.1"
]

[project.scripts]
private-assistant-spotify-skill = "private_assistant_spotify_skill.main:app"

[project.urls]
Homepage = "https://github.com/stkr22/private-assistant-spotify-skill-py"
Repository = "https://github.com/stkr22/private-assistant-spotify-skill-py"
Documentation = "https://github.com/stkr22/private-assistant-spotify-skill-py/tree/main/docs"
Issues = "https://github.com/stkr22/private-assistant-spotify-skill-py/issues"
Changelog = "https://github.com/stkr22/private-assistant-spotify-skill-py/blob/main/CHANGELOG.md"

[dependency-groups]
dev = [
    "ruff~=0.8.0",
    "mypy~=1.17.0",
    "pytest~=8.4.1",
    "pytest-cov~=6.0.0",
    "types-pyyaml~=6.0.12.20240311",
    "aiosqlite~=0.21.0",
    "pytest-xdist~=3.6.0",
    "coverage[toml]~=7.6.0",
    "commitizen~=4.8.3",
]

[[tool.mypy.overrides]]
module = [
    "spotipy.*"
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
]
ignore = ["E203"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q -n auto"

[tool.coverage.run]
source = ["private_assistant_spotify_skill"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "scm"
update_changelog_on_bump = true
